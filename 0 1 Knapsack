#include <bits/stdc++.h> 
 // always try to make more optimze it's 
int solve(int index, vector<int> weight, vector<int> value, int maxWeight) {
    if(index == 0 ) {
        if(maxWeight >= weight[index]) return value[index];
        else return 0;
    }
 
    int include = 0;
    if(weight[index] <= maxWeight) {
        include += value[index] + solve(index-1, weight, value, maxWeight - weight[index]);
    }
    int exclude = 0 + solve(index -1, weight, value, maxWeight);
 
    return max(include, exclude);
}
 
int solveMem(int index, vector<int> weight, vector<int> value, int maxWeight,vector<vector<int>>& dp ) {
    if(index == 0 ) {
        if(maxWeight >= weight[index]) return value[index];
        else return 0;
    }
 
    if(dp[index][maxWeight] !=-1) return dp[index][maxWeight];
 
    int include = 0;
    if(weight[index] <= maxWeight) {
        include += value[index] + solveMem(index-1, weight, value, maxWeight - weight[index], dp);
    }
    int exclude = 0 + solveMem(index -1, weight, value, maxWeight, dp);
 
    return dp[index][maxWeight] = max(include, exclude);
}
 
int solveTab(vector<int> weight, vector<int> value, int maxWeight, int n) {
    vector<vector<int>> dp(n+1, vector<int>(maxWeight + 1, 0));
    for(int i =weight[0]; i<=maxWeight; i++) {
        if(weight[0] <= maxWeight) dp[0][i] = value[0];
    }
 
    for(int i = 1; i<n; i++) {
        for(int j = 0; j<=maxWeight; j++) {
            int include = 0;
            if(j >= weight[i]) {
                include += value[i] + dp[i-1][j - weight[i]];
            }
            int exclude = dp[i-1][j];
            dp[i][j] = max(include, exclude);
        }
    }
    return dp[n-1][maxWeight];
 
}
 
int solveSpace(vector<int> weight, vector<int> value, int maxWeight, int n) {
    vector<int> prev(maxWeight+1, 0);
    vector<int> curr(maxWeight+1, 0);
 
    for(int w = weight[0]; w<=maxWeight; w++) {
        if(weight[0] <= maxWeight) prev[w] = value[0];
    }
 
    for(int i =1; i<n; i++) {
        for(int w = 0; w<=maxWeight; w++){
            int include = 0;
            if(weight[i] <= w) {
                include = value[i] + prev[w - weight[i]];
            }
            int exclude = prev[w];
 
            curr[w] = max(include, exclude);
        }
        prev = curr;
    }
    return prev[maxWeight];
}
 
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
    // Write your code here
    vector<vector<int>> dp(n+1, vector<int>(maxWeight+1, -1));
    //return solve(n-1, weight, value, maxWeight);
 
    //return solveMem(n-1, weight, value, maxWeight, dp);
 
    //return solveTab(weight, value, maxWeight, n);
    
    return solveSpace(weight, value, maxWeight, n);
