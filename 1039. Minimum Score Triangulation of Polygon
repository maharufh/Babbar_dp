class Solution {
public:
int solve(vector<int>& v, int i, int j){
    if(i+1 == j){
        return 0;

    }
    int ans = INT_MAX;
    for(int k = i+1; k<j; k++){
        ans = min(ans, v[i]*v[j]*v[k] + solve(v, i, k) + solve(v, k,j));
    }
    return ans;
}
  int solveMem(vector<int>& v, int i, int j, vector<vector<int>> &dp){
    // base case

    if(i+1 == j){
        return 0;
    }
    if(dp[i][j] != -1)
      return dp[i][j];

      int ans = INT_MAX;
    for(int k = i+1; k<j; k++){
        ans = min(ans, v[i]*v[j]*v[k] + solveMem(v, i, k, dp) + solveMem(v, k,j, dp));
    }
    dp[i][j] = ans;
    return dp[i][j];
}
 int solveTab(vector<int> &v) {
    int n = v.size();
    vector<vector<int>> dp(n, vector<int>(n, 0));

    for (int gap = 2; gap < n; gap++) {
        for (int i = 0; i + gap < n; i++) {
            int j = i + gap;
            dp[i][j] = INT_MAX;
            for (int k = i + 1; k < j; k++) {
                dp[i][j] = min(dp[i][j], v[i] * v[k] * v[j] + dp[i][k] + dp[k][j]);
            }
        }
    }
    return dp[0][n - 1];
}

    int minScoreTriangulation(vector<int>& values) {
        int n = values.size();

        return solveTab(values);
    }
};
